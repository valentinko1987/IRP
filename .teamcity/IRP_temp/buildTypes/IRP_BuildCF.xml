<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="3be88b64-c7d1-4854-a955-f232e563bfb3" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2020.1/project-config.xsd">
  <name>BuildCF</name>
  <description />
  <settings>
    <disabled-settings>
      <setting-ref ref="RUNNER_16" />
    </disabled-settings>
    <parameters>
      <param name="env.CheckConfigSettings" value="/CheckConfig -ConfigLogIntegrity -IncorrectReferences -ThinClient -WebClient -MobileClient -MobileAppClient -Server -MobileAppServer -MobileClientStandalone -ExternalConnection -ExternalConnectionServer -ThickClientManagedApplication -ThickClientServerManagedApplication -ThickClientOrdinaryApplication -ThickClientServerOrdinaryApplication -DistributiveModules -UnreferenceProcedures -HandlersExistence -EmptyHandlers -ExtendedModulesCheck -CheckUseModality -CheckUseSynchronousCalls -UnsupportedFunctional -MobileClientDigiSign" />
      <param name="env.Database1CName" value="%dep.IRP_GitHubUpdate.env.Database1CName%" />
      <param name="env.PathToRACTools" value="&quot;%env.PathTo1CBin%\rac.exe&quot;" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_16" name="Drop DB" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$cmdOutput = cmd /c "%env.PathToRACTools%" cluster list '2>&1' | Out-String
$DBName = '%env.Database1CName%'
$FirstClusterID = $cmdOutput.Split(':') | ForEach-Object {
    $_.Trim().Split([environment]::NewLine,[System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object {
        $_.Trim()
    }
}
$ClusterIndex = (0..($FirstClusterID.Count-1)) | where {$FirstClusterID[$_] -eq 'cluster'}
$ClusterID = $FirstClusterID[ $ClusterIndex + 1 ]
Write-Output "Work on cluster: $ClusterID"

$cmdOutput = cmd /c "%env.PathToRACTools%" infobase --cluster=$ClusterID summary list '2>&1' | Out-String
$AllDB = $cmdOutput.Split(':') | ForEach-Object {
    $_.Trim().Split([environment]::NewLine,[System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object {
        $_.Trim()
    }
}
$AllDB
$DBIndex = (0..($AllDB.Count-1)) | where {$AllDB[$_] -eq $DBName}
If ($DBIndex -eq $null) {
    Write-Output "DB not found: $DBName"
    exit 0
}
else {
    $DatabaseID = $AllDB[ $DBIndex - 2 ]
    Write-Output "DatabaseID: $DatabaseID"
}

$cmdOutput = cmd /c "%env.PathToRACTools%" infobase --cluster=$ClusterID drop --infobase=$DatabaseID --infobase-user=%env.LoginTo1C% --infobase-pwd=%env.PassTo1C% --drop-database '2>&1' | Out-String

$cmdOutput]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_17" name="Drop DB MetaRunner" type="DropDB">
        <parameters>
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_3" name="Create New Template Database" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[start /wait "1cv8.exe" %env.PathTo1CPlatform% CREATEINFOBASE Srvr=localhost;Ref=%env.Database1CName%;DBMS=MSSQLServer;DBSrvr=localhost;DB=%env.Database1CName%;DBUID=sa;DBPwd=GfhjkmSa21;CrSQLDB=Y;SchJobDn=N; /UseTemplate %teamcity.tool.clean_irp%\IRP.dt /Out %env.LogFile1C% /DisableStartupMessages
echo ##teamcity[compilationStarted compiler='Log from 1C: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else echo -e ""\e[34m $line""; fi; done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C: %env.LogFile1C%']]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_4" name="Convert from EDT to XML" type="simpleRunner">
        <parameters>
          <param name="script.content" value="ring edt workspace export --configuration-files %system.teamcity.build.tempDir%\xml --project %teamcity.build.workingDir%\IRP --workspace-location %system.teamcity.build.tempDir%\WS" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_5" name="Update DB Config from XML" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[start /wait "1cv8.exe" %env.PathTo1CPlatform% Designer %env.ConnectionTo1C% /Out %env.LogFile1C% /LoadConfigFromFiles %system.teamcity.build.tempDir%\xml /UpdateDBCfg
echo ##teamcity[compilationStarted compiler='Log from 1C: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else echo -e ""\e[34m $line""; fi; done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C: %env.LogFile1C%']]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_6" name="Check syntax" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[start /wait "1cv8.exe" %env.PathTo1CPlatform% Designer %env.ConnectionTo1C% /Out %env.LogFile1C% /CheckConfig %env.CheckConfigSettings%
echo ##teamcity[compilationStarted compiler='Log from 1C: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *""<<?>>""* ]]; then echo -e ""\e[31m $line""; else echo -e ""\e[34m $line""; fi; done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C: %env.LogFile1C%']]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Irp_HttpsGithubComValentinko1987irpRefsHeadsDevelop" />
    </vcs-settings>
    <requirements>
      <equals id="RQ_1" name="system.agent.name" value="Current session" />
    </requirements>
    <build-triggers>
      <build-trigger id="TRIGGER_1" type="buildDependencyTrigger">
        <parameters>
          <param name="afterSuccessfulBuildOnly" value="true" />
          <param name="branchFilter" value="+:*" />
          <param name="dependsOn" value="IRP_GitHubUpdate" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="BUILD_EXT_4" type="commit-status-publisher">
        <parameters>
          <param name="github_authentication_type" value="token" />
          <param name="github_host" value="https://api.github.com" />
          <param name="github_oauth_user" value="valentinko1987" />
          <param name="publisherId" value="githubStatusPublisher" />
          <param name="secure:github_access_token" value="credentialsJSON:b1c44276-6fb4-40da-b62a-10a24c518910" />
          <param name="vcsRootId" value="Irp_HttpsGithubComValentinko1987irpRefsHeadsDevelop" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_5" type="pullRequests">
        <parameters>
          <param name="authenticationType" value="token" />
          <param name="filterAuthorRole" value="EVERYBODY" />
          <param name="providerType" value="github" />
          <param name="secure:accessToken" value="credentialsJSON:b1c44276-6fb4-40da-b62a-10a24c518910" />
          <param name="vcsRootId" value="Irp_HttpsGithubComValentinko1987irpRefsHeadsDevelop" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_7" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="Designer already works with this infobase" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
    </build-extensions>
    <dependencies>
      <depend-on sourceBuildTypeId="IRP_GitHubUpdate">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

